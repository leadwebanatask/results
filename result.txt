Task 1. Floats.

1.a Please explain why this code `console.log(0.1 + 0.2 == 0.3);` outputs `false` in console? 

False result is caused by floating accuracy problems which were well described here: https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems
so 0.1 + 0.2 should be equal to 0.3 but console.log(0.1 + 0.2) outputs: 0.30000000000000004
in that case 0.30000000000000004 is not equal 0.3 



1.b Please suggest fix to make this expression working as expected.

JavaScript introduced toFixed function which returns string value with specified number of decimals.
ref: http://www.w3schools.com/jsref/jsref_tofixed.asp
Also there is casting function called parseFloat.
ref: http://www.w3schools.com/jsref/jsref_parsefloat.asp

below code will solve the issue. 
Also please notice that parseFloat is not mandatory
(in that case == will return true, but === will return false caused by different data types)

console.log( parseFloat( (0.1 + 0.2).toFixed(5)  ) === 0.3 )

to ensure that compared values are casted / rounded in same way for more sophisticated equations 
right hand side should be handled in same way parseFloat((0.3).toFixed(5))

Task 2. Sum function.

-Write a `sum` function which will work properly when invoked using syntax below: 
console.log(sum(2,3)); // Outputs 5 

function sum() {
	var result = 0;
	for (var arg in arguments) {
		if (arguments.hasOwnProperty(arg) && !isNaN(arguments[arg])) {
			result = parseFloat((result + arguments[arg]).toFixed(5));
		}
	}
	return result;
}

this function will accept unspecified number of arguments. 
if ran without arguments will return 0,
if single numeric argument was given it returns given argument
if more than one numberic argument was given then it returns sum of numeric arguments. 

sum() -> reutrns 0
sum(1) -> returns 1
sum(1,2) -> returns 3
sum(0.1,0.2) -> returns 0.3
sum(1,2,3,4,0.1) -> returns 10.1 
sum(1,2,3,4,0.1,'10') -> returns 20.1
sum(1,2,3,4,0.1,'10','10 apples') -> return 20.1 (non numeric arguments are ignored*)

* it is just my assumption to ignore non numeric values against throwing exceptions. 

Task 3. Loops.

Consider you have code snippet like this:

for (var i = 0; i < 5; i++) {
  var btn = document.createElement('button');
  btn.appendChild(document.createTextNode('Button ' + i));
  btn.addEventListener('click', function(){ console.log(i); });
  document.body.appendChild(btn);
}

3.a    What will be the output when user clicks on Button 1 and why?

output will be 5
Since i is incrementing in scope above (outside function context) in moment
when button is clicked i value is eq to 5. 

3.b    Please, suggest a fix to get the expected behavior.

for (var i = 0; i < 5; i++) {
	(function(num) {
		var btn = document.createElement('button');
		btn.appendChild(document.createTextNode('Button ' + num));
		btn.addEventListener('click', function() {
			console.log(num);
		});
		document.body.appendChild(btn);
	})(i);
}


Above snippet creates a scope snapshot of i value and encapsulates it into anomyous function. 


Task 4. Extracts all query strings from URL

Write a JavaScript function which extracts all query strings from URL and push them into a JavaScript object named as 'datalayer' as key values.

Example URL:

http://www.datalicious.com/?pia.ca=72208039&pie.de=cbartens@datalicious.com&pin.gn=Christian&pin.fn=Bartens&pip.de=&oi.na=&ps.na=&pl.ci=&pl.re=&pl.co=&utm_source=purl&utm_medium=purl&utm_campaign=purl


function extractParams(url) {
	if (typeof url ==="undefined") {
		url = window.location.href;
	}

function getParams(url) {
    var params = {};
    var parts = url.replace(/[?&]+([^=&]+)=([^&]*)/gi,    
    function(m,key,value) {
      params[key] = value;
    });
    return params;
  }
  
function setParams2DL(params) {
	window.datalayer = window.datalayer? window.datalayer :  {};
	window.datalayer.params = params;
}

setParams2DL(getParams(url));

}

introduced snippet uses given url or take browsed site URL. 
getParams function extracts params into key values object.
setParams2DL saves data into datalayer property (datalayer usualy stores multiple values/objects)

Task 5. Data layer Object

Write a JavaScript function which takes 'datalayer' object from task 4 and convert them in image tag as demonstrated below and append as child to 'body' tag.

<img src="https://example.com/datacollector?pia.ca=72208039&pie.de=cbartens@datalicious.com&pin.gn=Christian&pin.fn=Bartens">



function populateImageTag(url) {

	//map function is not working in older IEs.
	function encodeData(data) {
		return Object.keys(data).map(function(key) {
			return [key, data[key]].map(encodeURIComponent).join("=");
		}).join("&");
	}

	function urlFix(url) {
		if (url.substring(url.length - 1, url.length) === "?" || url.substring(url.length - 1, url.length) === "&") {
			return url;
		}

		if (url.substring(url.length - 1, url.length) !== "?" && url.substring(url.length - 1, url.length) !== "&" && url.indexOf("?") > -1) {
			return url + "&";
		}
		
		if (url.substring(url.length - 1, url.length) !== "?" && url.substring(url.length - 1, url.length) !== "&" && url.indexOf("?") === -1) {
			return url + "?";
		}
	}

	function generateUrl(url) {
		window.datalayer = window.datalayer ? window.datalayer : {};
		window.datalayer.params = window.datalayer.params ? window.datalayer.params : {};
		return urlFix(url) + encodeData(window.datalayer.params);
	}

	var img = document.createElement('img');
	var src = document.createAttribute("src");
	src.value = generateUrl(url);
	img.setAttributeNode(src);
    document.body.appendChild(img);
}

above snipped generates images tag with given url, there is also check what kind of url was given.
usage: populateImageTag('https://example.com/datacollector');

please ensure that given host has proper/valid ssl certyficate. 
ssl issues are handled differently in various browsers. 
recommended usage*: populateImageTag('//example.com/datacollector');
this will save computing power on non ssl pages
*this will fail on localfile protocol (file://...html)
